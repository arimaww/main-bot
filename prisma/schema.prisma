generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId     Int      @id @default(autoincrement())
  telegramId String
  userName   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  basket     Basket[]
  order      Order[]
}

model Product {
  productId   Int      @id @default(autoincrement())
  name        String
  synonym     String?
  description String
  picture     String?
  count       Int
  cost        Decimal
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  basket      Basket[]
  order       Order[]
}

model Basket {
  basketId     Int      @id @default(autoincrement())
  userId       Int
  productId    Int
  productCount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  product      Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Order {
  orderId           Int         @id @default(autoincrement())
  orderTrackNumber  String?
  userId            Int
  surName           String?
  firstName         String?
  middleName        String?
  productId         Int?
  productCount      Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt
  status            OrderStatus @default(WAITPAY)
  orderUniqueNumber String?
  phone             String?
  selectedPvzCode   String?
  selectedTariff    Int?
  fileId            String?
  deliveryCost      Int?
  bankId            Int?
  totalPrice        Int?
  Bank              Bank?       @relation(fields: [bankId], references: [id], onDelete: Cascade)
  product           Product?    @relation(fields: [productId], references: [productId], onDelete: SetDefault)
  user              User        @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model CdekOffice {
  officeId     Int      @id @default(autoincrement())
  code         String
  uuid         String
  countryCode  String
  regionCode   Int
  region       String
  cityCode     Int
  City         String
  address      String
  address_full String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model UserCrm {
  id        Int      @id @unique @default(autoincrement())
  firstName String
  surName   String
  role      Role     @default(MODERATOR)
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bank {
  id        Int      @id @unique @default(autoincrement())
  bankName  String
  requisite String
  recipient String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order[]
}

enum Role {
  ADMIN
  MODERATOR
}

enum OrderStatus {
  PENDING
  SUCCESS
  WAITPAY
}
