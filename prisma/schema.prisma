generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int        @id @default(autoincrement())
  telegramId      String
  userName        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  email           String?
  firstName       String?
  middleName      String?
  phone           String?
  selectedCity    String?
  selectedCountry String?
  selectedPvzCode String?
  selectedRegion  String?
  surName         String?
  discountId      Int?
  basket          Basket[]
  Keyboard        Keyboard[]
  order           Order[]
}

model Product {
  productId       Int                     @id @default(autoincrement())
  name            String
  synonym         String?
  description     String
  longDescription String?
  is_archived     Boolean                 @default(false)
  visible_status  PRODUCT_VISIBLE_STATUS? @default(VISIBLE)
  sostav          String?
  picture         String?
  count           Int
  cost            Decimal
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @default(now()) @updatedAt
  primeCost       Decimal?
  categoryId      Int?
  basket          Basket[]
  order           Order[]
  Category        Category?               @relation(fields: [categoryId], references: [id])
  ProductDiscount ProductDiscount?
  ProductSet      ProductSet[]
}

model Basket {
  basketId         Int             @id @default(autoincrement())
  userId           Int
  productId        Int
  productCount     Int
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @default(now()) @updatedAt
  promocodeId      Int?
  secretDiscountId Int?
  freeDelivery     Boolean         @default(false)
  product          Product         @relation(fields: [productId], references: [productId], onDelete: Cascade)
  Promocodes       Promocodes?     @relation(fields: [promocodeId], references: [promocodeId], onDelete: Cascade)
  SecretDiscount   SecretDiscount? @relation(fields: [secretDiscountId], references: [id])
  user             User            @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Order {
  orderId                 Int           @id @default(autoincrement())
  orderTrackNumber        String?
  userId                  Int?
  surName                 String?
  firstName               String?
  middleName              String?
  productId               Int?
  productCount            Int
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @default(now()) @updatedAt
  status                  OrderStatus   @default(WAITPAY)
  orderUniqueNumber       String?
  phone                   String?
  selectedPvzCode         String?
  selectedTariff          Int?
  fileId                  String?
  deliveryCost            Int?
  bankId                  Int?
  totalPrice              Int?
  selectedCountry         String?
  email                   String?
  orderType               OrderType?
  messageId               String?
  country                 String?
  pvzCode                 String?
  index                   String?
  region                  String?
  city                    String?
  totalPriceWithDiscount  Decimal?
  productCostWithDiscount Decimal?
  promocodeId             Int?
  secretDiscountPercent   Int?
  address                 String?
  commentForCollector     String?
  commentByClient         String?
  freeDelivery            Boolean       @default(false)
  orderBarcodeId          Int?
  messagesId              Int?
  Bank                    Bank?         @relation(fields: [bankId], references: [id])
  Messages                Messages?     @relation(fields: [messagesId], references: [id])
  OrderBarcode            OrderBarcode? @relation(fields: [orderBarcodeId], references: [id])
  product                 Product?      @relation(fields: [productId], references: [productId])
  Promocodes              Promocodes?   @relation(fields: [promocodeId], references: [promocodeId])
  user                    User?         @relation(fields: [userId], references: [userId])
}

model CdekOffice {
  officeId     Int      @id @default(autoincrement())
  code         String
  uuid         String
  countryCode  String
  regionCode   Int
  region       String
  cityCode     Int
  City         String
  address      String
  address_full String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  allowed_cod  Boolean?
}

model UserCrm {
  id        Int      @id @unique @default(autoincrement())
  firstName String
  surName   String
  role      Role     @default(MODERATOR)
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bank {
  id          Int          @id @unique @default(autoincrement())
  bankName    String
  requisite   String
  recipient   String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  sbpNumber   String?
  paymentType PAYMENT_TYPE @default(BANK)
  comments    String?
  Order       Order[]
}

model Keyboard {
  keyboardId Int    @unique @default(autoincrement())
  chatId     BigInt @unique
  title      String
  messageId  BigInt
  userId     Int
  User       User   @relation(fields: [userId], references: [userId])
}

model ProductDiscount {
  discountId Int       @unique @default(autoincrement())
  percent    Int?
  amount     Int?
  validDate  DateTime?
  productId  Int       @unique
  updatedAt  DateTime  @default(now())
  createdAt  DateTime  @default(now())
  Product    Product   @relation(fields: [productId], references: [productId])
}

model ProductSet {
  setId     Int     @unique @default(autoincrement())
  setName   String
  productId Int
  discount  Int
  Product   Product @relation(fields: [productId], references: [productId])
}

model BasketItems {
  id               Int              @unique @default(autoincrement())
  productId        Int
  productCount     Int
  gbasketId        Int
  createdAt        DateTime         @default(now())
  GeneratedBaskets GeneratedBaskets @relation(fields: [gbasketId], references: [gbasketId])
}

model GeneratedBaskets {
  gbasketId        Int             @unique @default(autoincrement())
  cartKey          String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime
  secretDiscountId Int?            @unique
  freeDelivery     Boolean         @default(false)
  BasketItems      BasketItems[]
  SecretDiscount   SecretDiscount? @relation(fields: [secretDiscountId], references: [id])
}

model Promocodes {
  promocodeId    Int      @unique @default(autoincrement())
  title          String
  uses           Int
  percent        Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  fromWhatAmount Int
  Basket         Basket[]
  Order          Order[]
}

model SecretDiscount {
  id               Int                  @unique @default(autoincrement())
  percent          Int
  type             SecretDiscountStatus @default(PENDING)
  Basket           Basket[]
  GeneratedBaskets GeneratedBaskets?
}

model Category {
  id        Int       @unique @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime
  Product   Product[]
}

model OrderBarcode {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())
  Order     Order[]
}

model Messages {
  id                Int      @id @default(autoincrement())
  cdek_group_msg_id String
  bot_msg_id        String
  createdAt         DateTime @default(now())
  updateAt          DateTime @default(now())
  Order             Order[]
}

enum Role {
  ADMIN
  MODERATOR
  OWNER
}

enum OrderStatus {
  PENDING
  SUCCESS
  WAITPAY
}

enum OrderType {
  CDEK
  MAIL
  MINIBUS
  PICKUP
}

enum SecretDiscountStatus {
  PENDING
  USED
}

enum PAYMENT_TYPE {
  BANK
  CRYPTO
}

enum PRODUCT_VISIBLE_STATUS {
  VISIBLE
  HIDDEN
  HIDDEN_ON_SITE
}
