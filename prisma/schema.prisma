generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId          Int        @id @default(autoincrement())
  telegramId      String
  userName        String
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @default(now()) @updatedAt
  email           String?
  firstName       String?
  middleName      String?
  phone           String?
  selectedCity    String?
  selectedCountry String?
  selectedPvzCode String?
  selectedRegion  String?
  surName         String?
  basket          Basket[]
  Keyboard        Keyboard[]
  order           Order[]
}

model Product {
  productId   Int       @id @default(autoincrement())
  name        String
  synonym     String?
  description String
  picture     String?
  count       Int
  cost        Decimal
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
  primeCost   Decimal?
  basket      Basket[]
  Discount    Discount?
  order       Order[]
}

model Basket {
  basketId     Int      @id @default(autoincrement())
  userId       Int
  productId    Int
  productCount Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  product      Product  @relation(fields: [productId], references: [productId], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Order {
  orderId           Int         @id @default(autoincrement())
  orderTrackNumber  String?
  userId            Int?
  surName           String?
  firstName         String?
  middleName        String?
  productId         Int?
  productCount      Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now()) @updatedAt
  status            OrderStatus @default(WAITPAY)
  orderUniqueNumber String?
  phone             String?
  selectedPvzCode   String?
  selectedTariff    Int?
  fileId            String?
  deliveryCost      Int?
  bankId            Int?
  totalPrice        Int?
  selectedCountry   String?
  email             String?
  orderType         OrderType?
  messageId         String?
  city              String?
  Bank              Bank?       @relation(fields: [bankId], references: [id], onDelete: Cascade)
  product           Product?    @relation(fields: [productId], references: [productId], onDelete: SetDefault)
  user              User?       @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model CdekOffice {
  officeId     Int      @id @default(autoincrement())
  code         String
  uuid         String
  countryCode  String
  regionCode   Int
  region       String
  cityCode     Int
  City         String
  address      String
  address_full String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model UserCrm {
  id        Int      @id @unique @default(autoincrement())
  firstName String
  surName   String
  role      Role     @default(MODERATOR)
  email     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Bank {
  id        Int      @id @unique @default(autoincrement())
  bankName  String
  requisite String
  recipient String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Order     Order[]
}

model Keyboard {
  keyboardId Int    @unique @default(autoincrement())
  chatId     BigInt @unique
  title      String
  messageId  BigInt
  userId     Int
  User       User   @relation(fields: [userId], references: [userId])
}

model Discount {
  discountId Int       @unique @default(autoincrement())
  percent    Int?
  amount     Int?
  validDate  DateTime?
  productId  Int       @unique
  updatedAt  DateTime  @default(now())
  createdAt  DateTime  @default(now())
  Product    Product   @relation(fields: [productId], references: [productId])
}

enum Role {
  ADMIN
  MODERATOR
  OWNER
}

enum OrderStatus {
  PENDING
  SUCCESS
  WAITPAY
}

enum OrderType {
  CDEK
  MAIL
  MINIBUS
  PICKUP
}
