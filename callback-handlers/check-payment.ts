import { CallbackQuery } from "node-telegram-bot-api";
import { getPaymentStatus, makeToken } from "../helpers/payment/t-pay";
import { bot } from "../bot/bot";
import { prisma } from "../prisma/prisma-client";
import {
  getOrderObjInternation,
  getOrderObjRu,
  getOrderObjRuWithPrepayment,
  getOrderTrackNumber,
  getToken,
  makeTrackNumber,
} from "../helpers/helpers";
import { getOrderData } from "../helpers/get-order-data";
import { MANAGER_CHAT_ID } from "../config/config";
import { CdekOffice } from "@prisma/client";
import { pollForBarcode } from "../helpers/getting-barcode";
import { generateBarcode } from "../helpers/generate-barcode";

const WEB_CRM_APP = process.env.WEB_CRM_APP as string;

export const handleCheckPayment = async (callbackQuery: CallbackQuery) => {
  const data = callbackQuery.data;
  if (!data) return;

  // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'checkpayment_12345')
  const [action, paymentId] = data.split("_");

  if (action === "checkpayment") {
    // TODO: –°–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ +
    // TODO: –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ NEW, —Ç–æ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –µ—â—ë –Ω–µ –ø—Ä–æ—à–ª–∞ +
    // TODO: –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω, —Ç–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –∏ –≤—ã–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ +
    // TODO: –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–¥ +
    // TODO: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É –°–î–≠–ö, –∞ —Ç–∞–∫–∂–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –±–æ—Ç–µ +

    const data = {
      TerminalKey: process.env.TERMINAL_KEY as string,
      PaymentId: paymentId,
    };

    const token = makeToken(data, process.env.TERMINAL_PASS as string);

    const request = await getPaymentStatus({ ...data, Token: token });

    const paymentInfo = await prisma.paymentInfo.findFirst({
      where: { paymentId },
    });
    if (!paymentInfo) return;
    const user = await prisma.user.findFirst({
      where: { userId: paymentInfo.userId },
    });
    if (!user) return;

    if (request.Status === "NEW")
      return await bot.sendMessage(
        user.telegramId,
        "–ü–ª–∞—Ç—ë–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
      );

    if (request.Status === "CONFIRMED") {
      await prisma.paymentInfo.update({
        where: { id: paymentInfo.id },
        data: { status: "CONFIRMED" },
      });

      // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–∞ –°–î–≠–ö –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const authData = await getToken({
        grant_type: "client_credentials",
        client_id: process.env.CLIENT_ID!,
        client_secret: process.env.CLIENT_SECRET!,
      });

      if (!user.telegramId) return console.log("user chat id –Ω–µ –Ω–∞–π–¥–µ–Ω");

      const orderData = await getOrderData(paymentInfo.orderUniqueNumber);

      if (orderData?.status === "SUCCESS")
        return bot
          .sendMessage(MANAGER_CHAT_ID, "–î–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç")
          .catch((err) => console.log(err));

      if (!orderData?.selectedPvzCode && !orderData?.address) {
        return await bot.sendMessage(
          user.telegramId,
          "selectedPvzCode –Ω–µ –Ω–∞–π–¥–µ–Ω"
        );
      }

      let cdekOffice: CdekOffice | null = null;

      const cityRecordPromise = prisma.cdekOffice.findFirst({
        where: { City: orderData.cityName! },
      });

      const cityRecord = await cityRecordPromise.catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ cityCode:", err);
        return null;
      });
      const cityCode = cityRecord?.cityCode;

      if (!orderData.address) {
        cdekOffice = await prisma.cdekOffice
          .findFirst({
            where: {
              City: orderData.cityName!,
              code: orderData.selectedPvzCode as string,
            },
          })
          .catch((err) => {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ cdekOffice:", err);
            return null;
          });

        if (!cdekOffice) {
          return await bot.sendMessage(user.telegramId, "cdekOffice –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }
      }

      const isRussian = orderData?.selectedCountry === "RU";
      const allowedCod = isRussian ? Boolean(cdekOffice?.allowed_cod) : false;

      let getOrderObject;

      if (isRussian) {
        if (allowedCod) {
          getOrderObject = await getOrderObjRu(
            authData?.access_token!,
            paymentInfo.orderUniqueNumber,
            orderData.totalPrice!,
            orderData.surName!,
            orderData.firstName!,
            orderData.middleName!,
            orderData.phone!,
            orderData.selectedPvzCode!,
            orderData.deliveryCost!,
            orderData.selectedTariff!,
            orderData.address!,
            cityCode!,
            orderData.freeDelivery
          );
        } else {
          getOrderObject = await getOrderObjRuWithPrepayment(
            authData?.access_token!,
            paymentInfo.orderUniqueNumber,
            orderData.totalPrice!,
            orderData.surName!,
            orderData.firstName!,
            orderData.middleName!,
            orderData.phone!,
            orderData.selectedPvzCode!,
            orderData.deliveryCost!,
            orderData.selectedTariff!,
            orderData.address!,
            cityCode!,
            orderData.freeDelivery
          );
        }
      } else {
        getOrderObject = await getOrderObjInternation(
          authData?.access_token!,
          paymentInfo.orderUniqueNumber,
          orderData.totalPrice!,
          orderData.surName!,
          orderData.firstName!,
          orderData.middleName!,
          orderData.phone!,
          orderData.selectedPvzCode!,
          orderData.deliveryCost!,
          orderData.selectedTariff!,
          orderData.address!,
          cityCode!
        );
      }
      const delay = (ms: number) =>
        new Promise((resolve) => setTimeout(resolve, ms));

      await makeTrackNumber(getOrderObject);

      if (orderData && orderData.im_number) {
        await delay(2000);

        const orderCdekData = await getOrderTrackNumber(
          orderData?.im_number,
          authData?.access_token!
        ).then((order) => order.entity);

        const orderTrackNumberForUser = orderCdekData.cdek_number;

        if (!orderTrackNumberForUser)
          return await bot.sendMessage(
            user.telegramId,
            `–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º: ${orderCdekData.uuid} –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å.`
          );

        await prisma.order.updateMany({
          where: { orderUniqueNumber: orderData?.im_number },
          data: {
            status: "SUCCESS",
            orderTrackNumber: orderTrackNumberForUser,
          },
        });
        // -----------------------------------------------------

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä

        await bot
          .sendMessage(
            orderData.telegramId!,
            `üìù–í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n–í–æ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${orderTrackNumberForUser}\n(–µ—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–∞, —Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ <a href="https://t.me/ManageR_triple_h">–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç—É</a>)\n\n` +
              `–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–∫—É–ø–∫—É, ${orderData?.surName} ${orderData?.firstName} ${orderData?.middleName}!\n\n` +
              `–í–∞—à –∑–∞–∫–∞–∑:\n${orderData.products
                .map((el) => `${el.productCount} —à—Ç. | ${el.synonym}`)
                .join("\n")}\n\n` +
              `üï∞Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—ã–ª–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 3—Ö –¥–Ω–µ–π –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã (–ù–µ —Å—á–∏—Ç–∞—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏. –û—Ç–ø—Ä–∞–≤–æ–∫ –≤ —ç—Ç–∏ –¥–Ω–∏ –Ω–µ—Ç, –Ω–æ –º–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö).\n\n` +
              `–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 4—Ö –¥–Ω–µ–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, —Å–æ–æ–±—â–∏—Ç–µ <a href="https://t.me/ManageR_triple_h">–Ω–∞–º</a> –æ–± —ç—Ç–æ–º.\n\n` +
              `üì¶ –ï—Å–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ –Ω–∞ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ - –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è. –ò–Ω–∞—á–µ –∑–∞ –≤–æ–∑–≤—Ä–∞—Ç —É–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å—É–º–º–∞ (–∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∫ –≤–∞–º –∏ –æ–±—Ä–∞—Ç–Ω–æ).` +
              `\n\nüîó –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª:\nhttps://t.me/+6MR4nDee-YA5ZWUy` +
              `\n\nüîó –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã (–Ω–∞ —Å–ª—É—á–∞–π –ø–æ—Ç–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É):\nhttps://t.me/+aeKR9GmiV2cxOTFi\nhttps://t.me/+FiEPDjQgSdswYTAy` +
              `\n\n‚ùóÔ∏è–ü–†–ï–¢–ï–ù–ó–ò–ò –ü–û –°–û–°–¢–û–Ø–ù–ò–Æ –¢–û–í–ê–†–ê –ò –°–û–û–¢–í–ï–¢–°–¢–í–ò–Æ –ó–ê–ö–ê–ó–ê –†–ê–°–°–ú–ê–¢–†–ò–í–ê–Æ–¢–°–Ø –¢–û–õ–¨–ö–û –ü–†–ò –ù–ê–õ–ò–ß–ò–ò –í–ò–î–ï–û–§–ò–ö–°–ê–¶–ò–ò –í–°–ö–†–´–¢–ò–Ø –£–ü–ê–ö–û–í–ö–ò‚ùóÔ∏è`,
            {
              parse_mode: "HTML",
              disable_web_page_preview: true,
            }
          )
          .catch((err) => console.log(err));

        // ----------------------------------

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        const timestamp = new Date();

        const isRu = orderData?.selectedCountry === "RU";
        const isCourier = Boolean(orderData?.address);
        const hasDiscount = Boolean(orderData?.totalPriceWithDiscount);
        const allowedCOD = cdekOffice?.allowed_cod;

        let priceToPay: number;
        let paymentNote: string;

        if (isCourier) {
          // –ö—É—Ä—å–µ—Ä ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –≤ –ø–ª–∞—Ç–µ–∂–µ
          priceToPay = hasDiscount
            ? Number(orderData!.totalPriceWithDiscount) +
              Number(orderData!.deliveryCost)
            : Number(orderData!.totalPrice) + Number(orderData!.deliveryCost);
          paymentNote = "<strong>–¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏</strong>";
        } else if (isRu) {
          // –°–∞–º–æ–≤—ã–≤–æ–∑ –≤ –†–§ ‚Äî —É—á–∏—Ç—ã–≤–∞–µ–º allowed_cod
          if (allowedCOD) {
            priceToPay = hasDiscount
              ? Number(orderData!.totalPriceWithDiscount)
              : Number(orderData!.totalPrice);
            paymentNote = "<strong>–¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏</strong>";
          } else {
            priceToPay = hasDiscount
              ? Number(orderData!.totalPriceWithDiscount) +
                Number(orderData!.deliveryCost)
              : Number(orderData!.totalPrice) + Number(orderData!.deliveryCost);
            paymentNote = "<strong>–¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π</strong>";
          }
        } else {
          // –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ ‚Äî –≤—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
          priceToPay = hasDiscount
            ? Number(orderData!.totalPriceWithDiscount) +
              Number(orderData!.deliveryCost)
            : Number(orderData!.totalPrice) + Number(orderData!.deliveryCost);
          paymentNote = "<strong>–¥–æ–ª–∂–µ–Ω –æ–ø–ª–∞—Ç–∏—Ç—å —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç–∞–≤–∫–∏</strong>";
        }
        const acceptOrderMessage =
          `T-PAY\n\n–ó–∞–∫–∞–∑ ${
            orderData?.username
              ? `<a href="${`https://t.me/${orderData?.username}`}">–∫–ª–∏–µ–Ω—Ç–∞</a>`
              : "–∫–ª–∏–µ–Ω—Ç–∞"
          }` +
          ` –ø—Ä–∏–Ω—è—Ç.\nTelegram ID: ${orderData?.telegramId}\n\n` +
          `\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${orderTrackNumberForUser} \n\n–ü–µ—Ä–µ—á–µ–Ω—å –∑–∞–∫–∞–∑–∞:\n` +
          `${orderData.products
            .map((el) => `${el.productCount} —à—Ç. | ${el.synonym}`)
            .join("\n")}\n\n` +
          `–ü—Ä–∞–π—Å: ${priceToPay} ${paymentNote}` +
          `\n–î–æ—Å—Ç–∞–≤–∫–∞: ${orderData?.deliveryCost}\n\n–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n` +
          `${orderData?.surName} ${orderData?.firstName} ${orderData?.middleName}\n–ì–æ—Ä–æ–¥: ${orderData?.cityName}\n` +
          `–ù–æ–º–µ—Ä: ${orderData?.phone?.replace(/[ ()-]/g, "")}\n\n` +
          `${
            orderData?.secretDiscountPercent
              ? `<blockquote>–£ –¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å–∫–∏–¥–∫–∞ –Ω–∞ ${orderData?.secretDiscountPercent} ‚ÇΩ. –ö–æ—Ä–∑–∏–Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.</blockquote>`
              : ""
          }` +
          `${orderData?.promocode ? `<blockquote>–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥:  ${orderData?.promocode.title} –Ω–∞ ${orderData?.promocode?.percent} %</blockquote>` : ""}` +
          `–í—Ä–µ–º—è: ${timestamp.getDate()}.${
            timestamp.getMonth() + 1 < 10
              ? "0" + (timestamp.getMonth() + 1)
              : timestamp.getMonth() + 1
          }.` +
          `${timestamp.getFullYear()}  ${
            timestamp.getHours() < 10
              ? "0" + timestamp.getHours()
              : timestamp.getHours()
          }:` +
          `${
            timestamp.getMinutes() < 10
              ? "0" + timestamp.getMinutes()
              : timestamp.getMinutes()
          }`;
        await bot
          .sendMessage(MANAGER_CHAT_ID, acceptOrderMessage, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data: `–£–¥–∞–ª–∏—Ç—å_${orderData?.im_number}`,
                  },
                ],
              ],
            },
            parse_mode: "HTML",
          })
          .catch(
            async (err) =>
              await bot.sendMessage(MANAGER_CHAT_ID, "[–õ–û–ì–ò]: –û—à–∏–±–∫–∞: " + err)
          );
        // ------------------------------------------------------------------------

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –°–î–≠–ö –∑–∞–∫–∞–∑ —Å —Ç—Ä–µ–∫ –Ω–æ–º–µ—Ä–æ–º
        const barcode_uuid = await generateBarcode(
          orderCdekData.uuid,
          authData?.access_token
        ).then((barcode) => barcode.entity.uuid);

        await new Promise((resolve) => setTimeout(resolve, 500));

        const barcode_url = await pollForBarcode(
          barcode_uuid,
          authData?.access_token!
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º barcode –≤ –±–¥

        const barcodeId = await prisma.orderBarcode
          .create({ data: { url: barcode_url } })
          .then((el) => el.id);

        // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º barcodeId –≤ Order

        await prisma.order
          .updateMany({
            where: { orderUniqueNumber: orderData?.im_number },
            data: { orderBarcodeId: barcodeId },
          })
          .catch((err) => console.log(err));

        await bot
          .sendMessage(
            process.env.CDEK_GROUP_ID!,
            `T-PAY\n\n–ó–∞–∫–∞–∑ ${
              orderData?.username
                ? `<a href="${`https://t.me/${orderData?.username}`}">–∫–ª–∏–µ–Ω—Ç–∞</a>`
                : "–∫–ª–∏–µ–Ω—Ç–∞"
            }` +
              ` –ø—Ä–∏–Ω—è—Ç.\nTelegram ID: ${orderData?.telegramId}\n\n–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä: ${orderTrackNumberForUser}.\n <a href="${barcode_url}">–°—Å—ã–ª–∫–∞</a>\n\n–ü–µ—Ä–µ—á–µ–Ω—å –∑–∞–∫–∞–∑–∞:\n${orderData.products
                .map((el) => `${el.productCount} —à—Ç. | ${el.synonym}`)
                .join("\n")}\n\n–ü—Ä–∞–π—Å: ${
                orderData?.totalPriceWithDiscount
                  ? orderData?.totalPriceWithDiscount
                  : orderData?.totalPrice
              }\n\n` +
              `–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n` +
              `${orderData?.surName} ${orderData?.firstName} ${orderData?.middleName}\n–ì–æ—Ä–æ–¥: ${orderData?.cityName}\n` +
              `–ù–æ–º–µ—Ä: ${orderData?.phone?.replace(/[ ()-]/g, "")}\n\n` +
              `${
                orderData?.secretDiscountPercent
                  ? `<blockquote>–°–∫–∏–¥–∫–∞ ${orderData?.secretDiscountPercent} ‚ÇΩ –Ω–∞ –∫–æ—Ä–∑–∏–Ω—É.</blockquote>`
                  : ""
              }` +
              `${orderData?.promocode ? `<blockquote>–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥: <strong>${orderData?.promocode.title}</strong> –Ω–∞ <strong>${orderData?.promocode?.percent} %</strong></blockquote>` : ""}` +
              `${orderData?.commentByUser ? `\n–ö–æ–º–º. –∫–ª–∏–µ–Ω—Ç–∞: ${orderData?.commentByUser}\n\n` : ""}` +
              `–í—Ä–µ–º—è: ${timestamp.getDate()}.${
                timestamp.getMonth() + 1 < 10
                  ? "0" + (timestamp.getMonth() + 1)
                  : timestamp.getMonth() + 1
              }.` +
              `${timestamp.getFullYear()}  ${
                timestamp.getHours() < 10
                  ? "0" + timestamp.getHours()
                  : timestamp.getHours()
              }:` +
              `${
                timestamp.getMinutes() < 10
                  ? "0" + timestamp.getMinutes()
                  : timestamp.getMinutes()
              }`,
            {
              parse_mode: "HTML",
              disable_web_page_preview: true,
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: "–°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑",
                      callback_data: `collect_order:${orderTrackNumberForUser}`,
                    },
                  ],
                  [
                    {
                      text: "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                      url: `${WEB_CRM_APP}/orderedit/${paymentInfo.orderUniqueNumber}`,
                    },
                  ],
                ],
              },
            }
          )
          .then(async (msg) => {
            const dbMessageId = await prisma.order
              .findFirst({
                where: { orderUniqueNumber: paymentInfo.orderUniqueNumber },
              })
              .then((msg) => msg?.messagesId);
            if (dbMessageId) {
              await prisma.messages.update({
                where: { id: dbMessageId },
                data: {
                  cdek_group_msg_id: String(msg.message_id),
                },
              });
            }
          })
          .catch((err) => console.log(err));
        // --------------------------------------------

        return;
      }
    }
  }
};
